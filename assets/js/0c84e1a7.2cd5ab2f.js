"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[806],{7057:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>d,metadata:()=>o,toc:()=>r});var i=t(4848),a=t(8453);const d={sidebar_position:14},s="Inserting difficult datatypes with DataType and/ or Schema",o={id:"docs/execute_api/encoding_special_data_types",title:"Inserting difficult datatypes with DataType and/ or Schema",description:"In order to insert data not supported by the db.databackend, developers",source:"@site/content/docs/execute_api/encoding_special_data_types.md",sourceDirName:"docs/execute_api",slug:"/docs/execute_api/encoding_special_data_types",permalink:"/docs/docs/execute_api/encoding_special_data_types",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/blob/main/docs/hr/content/docs/execute_api/encoding_special_data_types.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Basic insertion",permalink:"/docs/docs/execute_api/basic_insertion"},next:{title:"Working with and inserting large pieces of data",permalink:"/docs/docs/execute_api/using_hybrid_storage_to_handle_large_data_blobs"}},c={},r=[{value:"MongoDB",id:"mongodb",level:2},{value:"Direct encoding with <code>DataType</code>",id:"direct-encoding-with-datatype",level:3},{value:"Use with <code>Schema</code>",id:"use-with-schema",level:3},{value:"SQL",id:"sql",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"inserting-difficult-datatypes-with-datatype-and-or-schema",children:["Inserting difficult datatypes with ",(0,i.jsx)(n.code,{children:"DataType"})," and/ or ",(0,i.jsx)(n.code,{children:"Schema"})]}),"\n",(0,i.jsxs)(n.p,{children:["In order to insert data not supported by the ",(0,i.jsx)(n.code,{children:"db.databackend"}),", developers\nmay use ",(0,i.jsx)(n.code,{children:"DataType"})," and/ or ",(0,i.jsx)(n.code,{children:"Schema"})," instances to convert their data\nto encoded ",(0,i.jsx)(n.code,{children:"bytes"})," in the ",(0,i.jsx)(n.code,{children:"db.databackend"}),". When data is selected,\n",(0,i.jsx)(n.code,{children:"superduperdb"})," reinterprets this data in its original form (native Python images, audio, etc..)."]}),"\n",(0,i.jsx)(n.h2,{id:"mongodb",children:"MongoDB"}),"\n",(0,i.jsxs)(n.h3,{id:"direct-encoding-with-datatype",children:["Direct encoding with ",(0,i.jsx)(n.code,{children:"DataType"})]}),"\n",(0,i.jsxs)(n.p,{children:["In MongoDB, one wraps the item to be encoded with the ",(0,i.jsx)(n.code,{children:"DataType"}),".\nFor example, continuing the example from ",(0,i.jsx)(n.a,{href:"/docs/docs/execute_api/data_encodings_and_schemas#datatype-abstraction",children:"here"}),",\nwe do the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from superduperdb.backends.mongodb import Collection\nimport librosa \nfrom superduperdb.ext.pillow import pil_image\n\nmy_images = [\n    PIL.Image.open(path)\n    for path in os.listdir('./') if path.endswith('.jpeg')\n]\nmy_audio = [\n    librosa.load(path)\n    for path in os.listdir('./') if path.endswith('.wav')\n]\nwith open('text.json') as f:\n    my_text = json.load(f)\n\ndata = [\n    Document({\n        'img': pil_image(x),\n        'audio': audio(y),\n        'txt': z\n    })\n    for x, y, z in zip(my_images, my_audio, my_text)\n]\n\ndb.execute(\n    Collection('docs').insert_many(data)\n)\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"use-with-schema",children:["Use with ",(0,i.jsx)(n.code,{children:"Schema"})]}),"\n",(0,i.jsxs)(n.p,{children:["First developers should ",(0,i.jsxs)(n.a,{href:"./data_encodings_and_schemas",children:["create a ",(0,i.jsx)(n.code,{children:"Schema"})]}),".\nThen they may refer to the ",(0,i.jsx)(n.code,{children:"Schema"})," in the data insert:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"data = [\n    Document({\n        'img': pil_image(x),\n        'audio': audio(y),\n        'txt': z\n    })\n    for x, y, z in zip(my_images, my_audio, my_text)\n]\n\ndb.execute(\n    Collection('docs').insert_many(data, schema='my-schema')\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"sql",children:"SQL"}),"\n",(0,i.jsxs)(n.p,{children:["With SQL it's necessary to first ",(0,i.jsxs)(n.a,{href:"./data_encodings_and_schemas#table-schemas-in-sql",children:["set up a ",(0,i.jsx)(n.code,{children:"Table"})," with a ",(0,i.jsx)(n.code,{children:"Schema"})]}),".\nWith this table ",(0,i.jsx)(n.code,{children:"t"}),", one directly inserts the data:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"t.insert([\n    Document({\n        'img': pil_image(x),\n        'audio': audio(y),\n        'txt': z\n    })\n    for x, y, z in zip(my_images, my_audio, my_text)\n])\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const a={},d=i.createContext(a);function s(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);