"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[4729],{13561:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var r=t(85893),o=t(11151);const a={sidebar_position:32},s="Setting up SuperDuperDB as a change-data-capture daemon",c={id:"docs/walkthrough/change_data_capture",title:"Setting up SuperDuperDB as a change-data-capture daemon",description:"This functionality is currently for MongoDB only",source:"@site/content/docs/walkthrough/32_change_data_capture.md",sourceDirName:"docs/walkthrough",slug:"/docs/walkthrough/change_data_capture",permalink:"/docs/docs/walkthrough/change_data_capture",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/walkthrough/32_change_data_capture.md",tags:[],version:"current",sidebarPosition:32,frontMatter:{sidebar_position:32},sidebar:"tutorialSidebar",previous:{title:"Running non-blocking dask computations in the background",permalink:"/docs/docs/walkthrough/non_blocking_dask_jobs"},next:{title:"Vector-searcher service (coming soon)",permalink:"/docs/docs/walkthrough/vector_comparison_service"}},i={},d=[];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"setting-up-superduperdb-as-a-change-data-capture-daemon",children:"Setting up SuperDuperDB as a change-data-capture daemon"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"This functionality is currently for MongoDB only"})}),"\n",(0,r.jsx)(n.p,{children:"Setting-up SuperDuperDB as a change-data-capture daemon, is a simple call:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"db.cdc.listen()\n"})}),"\n",(0,r.jsx)(n.p,{children:"... or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"superduperdb cdc\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"superduperdb"})," is configured in this way, this daemon handles all inserts to\nSuperDuperDB, therefore, if ",(0,r.jsx)(n.code,{children:"superduperdb"})," is run in another process or service,\nit's important to configure the existence of the daemon:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduperdb import CFG\n\nCFG.cluster.cdc = True\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now that the daemon is running, even when data is inserted using a different client, such as\nthe native ",(0,r.jsx)(n.code,{children:"pymongo.MongoClient"})," client, then ",(0,r.jsx)(n.code,{children:"Listener"})," outputs are still created on those inputs."]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>s});var r=t(67294);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);