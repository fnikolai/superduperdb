"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[4142],{83749:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>i});var t=s(85893),c=s(11151);const d={sidebar_position:10},o="Datatype Encoders",r={id:"docs/fundamentals/document_encoder_abstraction",title:"Datatype Encoders",description:"In AI, typical types of data are:",source:"@site/content/docs/fundamentals/10_document_encoder_abstraction.md",sourceDirName:"docs/fundamentals",slug:"/docs/fundamentals/document_encoder_abstraction",permalink:"/docs/docs/fundamentals/document_encoder_abstraction",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/fundamentals/10_document_encoder_abstraction.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Component Abstraction",permalink:"/docs/docs/fundamentals/component_abstraction"},next:{title:"Interfacing with popular AI frameworks",permalink:"/docs/docs/fundamentals/supported_ai_frameworks"}},a={},i=[{value:"<code>Document</code>",id:"document",level:3},{value:"<code>Encoder</code>",id:"encoder",level:3},{value:"<code>Schema</code>",id:"schema",level:3}];function l(e){const n={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"datatype-encoders",children:"Datatype Encoders"}),"\n",(0,t.jsx)(n.p,{children:"In AI, typical types of data are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Numbers"})," (integers, floats, etc.)"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Text"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Images"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Audio"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Videos"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"...highly bespoke in house data"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Most databases don't support any data other than numbers and text.\nSuperDuperDB enables the use of these more interesting data-types using the ",(0,t.jsx)(n.code,{children:"Document"})," wrapper."]}),"\n",(0,t.jsx)(n.h3,{id:"document",children:(0,t.jsx)(n.code,{children:"Document"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Document"})," wrapper, wraps dictionaries, and is the container which is used whenever\ndata is exchanged with your database. That means inputs, and queries, wrap dictionaries\nused with ",(0,t.jsx)(n.code,{children:"Document"})," and also results are returned wrapped with ",(0,t.jsx)(n.code,{children:"Document"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Whenever the ",(0,t.jsx)(n.code,{children:"Document"})," contains data which is in need of specialized serialization,\nthen the ",(0,t.jsx)(n.code,{children:"Document"})," instance contains calls to ",(0,t.jsx)(n.code,{children:"Encoder"})," instances."]}),"\n",(0,t.jsx)(n.h3,{id:"encoder",children:(0,t.jsx)(n.code,{children:"Encoder"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Encoder"})," class, allows users to create and encoder custom datatypes, by providing\ntheir own serializers."]}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example of applying an ",(0,t.jsx)(n.code,{children:"Encoder"})," to add an image to a ",(0,t.jsx)(n.code,{children:"Document"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import pickle\nimport PIL.Image\nfrom superduperdb import Encoder, Document\n\nimage = PIL.Image.open('my_image.jpg')\n\nmy_image_encoder = Encoder(\n    identifier='my-pil',\n    encoder=lambda x: pickle.dumps(x),\n    decoder=lambda x: pickle.loads(x),\n)\n\ndocument = Document({'img': my_image_encoder(image)})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The bare-bones dictionary may be exposed with ",(0,t.jsx)(n.code,{children:".unpack()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:">>> document.unpack()\n{'img': <PIL.PngImagePlugin.PngImageFile image mode=P size=400x300>}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"schema",children:(0,t.jsx)(n.code,{children:"Schema"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Schema"})," allows developers to connect named fields of dictionaries\nor columns of ",(0,t.jsx)(n.code,{children:"pandas.DataFrame"})," objects with ",(0,t.jsx)(n.code,{children:"Encoders"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example ",(0,t.jsx)(n.code,{children:"Schema"}),", which is used together with text and image\nfields:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"s = Schema('my-schema', fields={'my-text': 'str', 'my-image': my_image_encoder})\n"})})]})}function h(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>o});var t=s(67294);const c={},d=t.createContext(c);function o(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);