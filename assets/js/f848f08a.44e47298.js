"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[2194],{5520:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t=r(4848),s=r(8453);const i={sidebar_position:4,tags:["quickstart"]},o="Environment setup",c={id:"get_started/environment",title:"Environment setup",description:"SuperDuperDB may be run in 2 modes:",source:"@site/content/get_started/environment.md",sourceDirName:"get_started",slug:"/get_started/environment",permalink:"/docs/get_started/environment",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/blob/main/docs/hr/content/get_started/environment.md",tags:[{label:"quickstart",permalink:"/docs/tags/quickstart"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,tags:["quickstart"]},sidebar:"tutorialSidebar",previous:{title:"Configure",permalink:"/docs/get_started/configuration"},next:{title:"Tutorials",permalink:"/docs/tutorials/intro"}},a={},d=[{value:"Development mode",id:"development-mode",level:2},{value:"Cluster mode",id:"cluster-mode",level:2},{value:"Services",id:"services",level:3},{value:"Ray cluster",id:"ray-cluster",level:4},{value:"Vector-search service",id:"vector-search-service",level:4},{value:"Change-data capture service",id:"change-data-capture-service",level:4},{value:"Rest API",id:"rest-api",level:4},{value:"Configuration",id:"configuration",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"environment-setup",children:"Environment setup"}),"\n",(0,t.jsx)(n.p,{children:"SuperDuperDB may be run in 2 modes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Development"}),": All functions and computations run by blocking the main thread in the foreground."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cluster"}),": Long Computations, requests, models run asychronously on separate workers, services"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development-mode",children:"Development mode"}),"\n",(0,t.jsxs)(n.p,{children:["By default, ",(0,t.jsx)(n.code,{children:"SuperDuperDB"})," runs in development mode. This makes it super easy for developers to\ntest the code-snippets and use-cases."]}),"\n",(0,t.jsx)(n.p,{children:"In development mode, all computations and configurations take place in a single process. Computations\nblock the process in the foreground, and developers can easily set breakpoints during computation\nfor debugging purposes."}),"\n",(0,t.jsxs)(n.p,{children:["In this mode, connecting to ",(0,t.jsx)(n.code,{children:"superduperdb"})," is as simple as this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb import superduper\n\ndb = superduper('<your-database-uri>')\n"})}),"\n",(0,t.jsx)(n.h2,{id:"cluster-mode",children:"Cluster mode"}),"\n",(0,t.jsxs)(n.p,{children:["In cluster mode, the above snippet will not work, since ",(0,t.jsx)(n.code,{children:"superduperdb"})," doesn't currently propagate\nthis configuration to the rest of the cluster. For that reason, the ",(0,t.jsx)(n.code,{children:"data_backend"})," URI should be specified\nin a ",(0,t.jsx)(n.a,{href:"/docs/get_started/configuration",children:"configuration file"})," common to all services in the cluster, and developers should\nconnect with:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb import superduper\n\ndb = superduper()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"services",children:"Services"}),"\n",(0,t.jsx)(n.p,{children:"In cluster mode, multiple individual services are set up which are responsible for various\nparts of the work flow:"}),"\n",(0,t.jsx)(n.h4,{id:"ray-cluster",children:"Ray cluster"}),"\n",(0,t.jsxs)(n.p,{children:["By specifying a ",(0,t.jsx)(n.code,{children:"ray"})," cluster, computations requested in SuperDuperDB are pushed down to the configured\n",(0,t.jsx)(n.code,{children:"ray"})," cluster, which may be set up with optimized hardware, specific settings, etc.. Read more ",(0,t.jsx)(n.a,{href:"../cluster_mode/non_blocking_ray_jobs.md",children:"here"})]}),"\n",(0,t.jsx)(n.h4,{id:"vector-search-service",children:"Vector-search service"}),"\n",(0,t.jsxs)(n.p,{children:["By specifying a vector-search service, the vector-comparison computation in vector-search queries\nis sent to this service, which may be set up to optimize for recall speed and performance.\nRead more ",(0,t.jsx)(n.a,{href:"../cluster_mode/vector_comparison_service.md",children:"here"})]}),"\n",(0,t.jsx)(n.h4,{id:"change-data-capture-service",children:"Change-data capture service"}),"\n",(0,t.jsxs)(n.p,{children:["By specifying a change-data capture service, developers are enabled to\ninsert data to their ",(0,t.jsx)(n.code,{children:"data_backend"})," without directly using the ",(0,t.jsx)(n.code,{children:"superduperdb"}),"\npackage, or even using Python. Read more ",(0,t.jsx)(n.a,{href:"../cluster_mode/change_data_capture.md",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"rest-api",children:"Rest API"}),"\n",(0,t.jsxs)(n.p,{children:["By specifying a Rest API service, developers may access ",(0,t.jsx)(n.code,{children:"superduperdb"})," using FastAPI REST\nendpoints, which a documentation and experimentation interface, as well as the\nability to integrate from non-Python programs. Read more ",(0,t.jsx)(n.a,{href:"../cluster_mode/rest_service.md",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"The configuration file should include the URIs of the services required:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# Settings pertaining to cluster mode\ncluster:\n\n  # change data capture\n  cdc:\n    strategy: null\n    \n    # How to connect to the service\n    uri: http://<cdc-host>:<cdc-port>\n\n  # ray compute settings\n  compute:\n\n    # How to connect to a ray service\n    uri: ray://<ray-host>:<ray-port>\n\n  # vector-search settings\n  vector_search:\n\n    # How to connect to the service\n    uri: http://<vector_search-host>:<vecto_search-port>\n    backfill_batch_size: 100\n\n  # REST API settings (experimental)\n  rest:\n\n    # How to connect to the service\n    uri: http://<rest-host>:<rest-port>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As well as the required database in ",(0,t.jsx)(n.code,{children:"data_backend"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"data_backend: <database-uri>\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);