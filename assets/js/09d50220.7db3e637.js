"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[1314],{64304:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>i});var s=d(85893),o=d(11151);const r={sidebar_position:2},t="Setting up tables and encodings",a={id:"docs/walkthrough/data_encodings_and_schemas",title:"Setting up tables and encodings",description:"superduperdb has flexible support for data-types. In both MongoDB and SQL databases,",source:"@site/content/docs/walkthrough/data_encodings_and_schemas.md",sourceDirName:"docs/walkthrough",slug:"/docs/walkthrough/data_encodings_and_schemas",permalink:"/docs/docs/walkthrough/data_encodings_and_schemas",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/walkthrough/data_encodings_and_schemas.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Start here",permalink:"/docs/docs/walkthrough/tutorial_walkthrough"},next:{title:"Inserting data",permalink:"/docs/docs/walkthrough/inserting_data"}},c={},i=[{value:"Encoders",id:"encoders",level:2},{value:"Schemas for SQL",id:"schemas-for-sql",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"setting-up-tables-and-encodings",children:"Setting up tables and encodings"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"superduperdb"})," has flexible support for data-types. In both MongoDB and SQL databases,\none uses ",(0,s.jsx)(n.code,{children:"superduperdb.Encoder"})," to define one's own data-types."]}),"\n",(0,s.jsx)(n.h2,{id:"encoders",children:"Encoders"}),"\n",(0,s.jsxs)(n.p,{children:["To do that, one instantiates the ",(0,s.jsx)(n.code,{children:"Encoder"})," class with functions which go to-and-from ",(0,s.jsx)(n.code,{children:"bytes"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Here is an ",(0,s.jsx)(n.code,{children:"Encoder"})," which encodes ",(0,s.jsx)(n.code,{children:"numpy.ndarray"})," instances to ",(0,s.jsx)(n.code,{children:"bytes"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import numpy\n\nmy_array = Encoder(\n    'my-array',\n    encoder=lambda x: memoryview(x).tobytes(),\n    decode=lambda x: numpy.frombuffer(x),\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here's a more interesting ",(0,s.jsx)(n.code,{children:"Encoder"})," which encoders audio from ",(0,s.jsx)(n.code,{children:"numpy.array"})," format to ",(0,s.jsx)(n.code,{children:".wav"})," file ",(0,s.jsx)(n.code,{children:"bytes"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import librosa\nimport io\nimport soundfile\n\n\ndef decoder(x):\n    buffer = io.BytesIO(x)\n    return librosa.load(buffer)\n\n\ndef encoder(x):\n    buffer = io.BytesIO()\n    soundfile.write(buffer)\n    return buffer.getvalue()\n\n\naudio = Encoder('audio', encoder=encoder, decoder=decoder)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["It's completely open to the user how exactly the ",(0,s.jsx)(n.code,{children:"encoder"})," and ",(0,s.jsx)(n.code,{children:"decoder"})," arguments are set."]}),"\n",(0,s.jsxs)(n.p,{children:["You may include this ",(0,s.jsx)(n.code,{children:"Encoder"})," in models, data-insers and more. You can also directly\nregister ",(0,s.jsx)(n.code,{children:"audio"})," in the system, using:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.add(audio)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"schemas-for-sql",children:"Schemas for SQL"}),"\n",(0,s.jsxs)(n.p,{children:["In SQL, one needs to define a schemas to work with tables in ",(0,s.jsx)(n.code,{children:"superduperdb"}),". The ",(0,s.jsx)(n.code,{children:"superduperdb.Schema"}),"\nbuilds on top of ",(0,s.jsx)(n.code,{children:"Encoder"})," and allows developers to combine standard data-types used in standard\nuse-cases, with bespoke data-types via ",(0,s.jsx)(n.code,{children:"Encoder"}),", as defined by, for instance, ",(0,s.jsx)(n.code,{children:"audio"})," above."]}),"\n",(0,s.jsxs)(n.p,{children:["To register/ create a ",(0,s.jsx)(n.code,{children:"Table"})," with a ",(0,s.jsx)(n.code,{children:"Schema"})," in ",(0,s.jsx)(n.code,{children:"superduperdb"}),", one uses ",(0,s.jsx)(n.code,{children:"superduperdb.backends.ibis.Table"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduperdb.backends.ibis import Table, dtype\nfrom superduperdb import Table\n\ndb.add(\n    Table(\n        'my-table',\n        schema=Schema(\n            'my-schema',\n            fields={'txt': dtype('str'), 'audio': audio, 'array': my_array}\n        )\n    )\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this invocation, we create a ",(0,s.jsx)(n.code,{children:"Table"})," with 2 columns, one with ",(0,s.jsx)(n.code,{children:"str"})," values and one with ",(0,s.jsx)(n.code,{children:"audio"})," values.\nWhen data is inserted using the ",(0,s.jsx)(n.code,{children:"db"})," connection, it is inserted into those columns, and the ",(0,s.jsx)(n.code,{children:"audio"})," component\nis used to convert the data into ",(0,s.jsx)(n.code,{children:"bytes"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},11151:(e,n,d)=>{d.d(n,{Z:()=>a,a:()=>t});var s=d(67294);const o={},r=s.createContext(o);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);