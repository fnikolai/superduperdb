"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[4872],{12160:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=o(85893),s=o(11151);const r={},a="QA Assistant & RAG",i={id:"use_cases/chatbot/Chatbot",title:"QA Assistant & RAG",description:"Building Q&A Assistant Using Mongo and OpenAI",source:"@site/content/use_cases/chatbot/Chatbot.md",sourceDirName:"use_cases/chatbot",slug:"/use_cases/chatbot/",permalink:"/docs/use_cases/chatbot/",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/use_cases/chatbot/Chatbot.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chatbot",permalink:"/docs/category/chatbot-1"},next:{title:"MNIST in Database",permalink:"/docs/use_cases/mnist_torch"}},d={},c=[{value:"Building Q&amp;A Assistant Using Mongo and OpenAI",id:"building-qa-assistant-using-mongo-and-openai",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Connect to datastore",id:"connect-to-datastore",level:2},{value:"Load Dataset",id:"load-dataset",level:2},{value:"Create a Vector-Search Index",id:"create-a-vector-search-index",level:2},{value:"Create a Chat-Completion Component",id:"create-a-chat-completion-component",level:2},{value:"Ask Questions to Your Docs",id:"ask-questions-to-your-docs",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"qa-assistant--rag",children:"QA Assistant & RAG"}),"\n",(0,t.jsx)(n.h2,{id:"building-qa-assistant-using-mongo-and-openai",children:"Building Q&A Assistant Using Mongo and OpenAI"}),"\n",(0,t.jsx)(n.p,{children:"This notebook is designed to demonstrate how to implement a document Question-and-Answer (Q&A) task using SuperDuperDB in conjunction with OpenAI and MongoDB. It provides a step-by-step guide and explanation of each component involved in the process."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before diving into the implementation, ensure that you have the necessary libraries installed by running the following commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"!pip install superduperdb\n!pip install ipython openai==0.27.6\n"})}),"\n",(0,t.jsx)(n.p,{children:"Additionally, ensure that you have set your openai API key as an environment variable. You can uncomment the following code and add your API key:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import os\n\n#os.environ['OPENAI_API_KEY'] = 'sk-...'\n\nif 'OPENAI_API_KEY' not in os.environ:\n    raise Exception('Environment variable \"OPENAI_API_KEY\" not set')\n"})}),"\n",(0,t.jsx)(n.h2,{id:"connect-to-datastore",children:"Connect to datastore"}),"\n",(0,t.jsxs)(n.p,{children:["First, we need to establish a connection to a MongoDB datastore via SuperDuperDB. You can configure the ",(0,t.jsx)(n.code,{children:"MongoDB_URI"})," based on your specific setup.\nHere are some examples of MongoDB URIs:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["For testing (default connection): ",(0,t.jsx)(n.code,{children:"mongomock://test"})]}),"\n",(0,t.jsxs)(n.li,{children:["Local MongoDB instance: ",(0,t.jsx)(n.code,{children:"mongodb://localhost:27017"})]}),"\n",(0,t.jsxs)(n.li,{children:["MongoDB with authentication: ",(0,t.jsx)(n.code,{children:"mongodb://superduper:superduper@mongodb:27017/documents"})]}),"\n",(0,t.jsxs)(n.li,{children:["MongoDB Atlas: ",(0,t.jsx)(n.code,{children:"mongodb+srv://<username>:<password>@<atlas_cluster>/<database>"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from superduperdb import superduper\nfrom superduperdb.backends.mongodb import Collection\nimport os\n\nmongodb_uri = os.getenv("MONGODB_URI","mongomock://test")\ndb = superduper(mongodb_uri)\n\ncollection = Collection(\'questiondocs\')\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"db.metadata\n"})}),"\n",(0,t.jsx)(n.h2,{id:"load-dataset",children:"Load Dataset"}),"\n",(0,t.jsxs)(n.p,{children:["In this example we use the internal textual data from the ",(0,t.jsx)(n.code,{children:"superduperdb"})," project's API documentation. The goal is to create a chatbot that can provide information about the project. You can either load the data from your local project or use the provided data."]}),"\n",(0,t.jsx)(n.p,{children:"If you have the SuperDuperDB project locally and want to load the latest version of the API, uncomment the following cell:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# import glob\n\n# ROOT = '../docs/hr/content/docs/'\n\n# STRIDE = 3       # stride in numbers of lines\n# WINDOW = 25       # length of window in numbers of lines\n\n# files = sorted(glob.glob(f'{ROOT}/*.md') + glob.glob(f'{ROOT}/*.mdx'))\n\n# content = sum([open(file).read().split('\\n') for file in files], [])\n# chunks = ['\\n'.join(content[i: i + WINDOW]) for i in range(0, len(content), STRIDE)]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Otherwise, you can load the data from an external source. The chunks of text contain code snippets and explanations, which will be used to build the document Q&A chatbot."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from IPython.display import *\n\nMarkdown(chunks[20])\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"!curl -O https://superduperdb-public.s3.eu-west-1.amazonaws.com/superduperdb_docs.json\n\nimport json\nfrom IPython.display import Markdown\n\nwith open('superduperdb_docs.json') as f:\n    chunks = json.load(f)\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can see that the chunks of text contain bits of code, and explanations,\nwhich can become useful in building a document Q&A chatbot."}),"\n",(0,t.jsxs)(n.p,{children:["As usual we insert the data. The ",(0,t.jsx)(n.code,{children:"Document"})," wrapper allows ",(0,t.jsx)(n.code,{children:"superduperdb"})," to handle records with special data types such as images,\nvideo, and custom data-types."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb import Document\n\ndb.execute(collection.insert_many([Document({'txt': chunk}) for chunk in chunks]))\n"})}),"\n",(0,t.jsx)(n.h2,{id:"create-a-vector-search-index",children:"Create a Vector-Search Index"}),"\n",(0,t.jsxs)(n.p,{children:["To enable question-answering over your documents, we need to setup a standard ",(0,t.jsx)(n.code,{children:"superduperdb"})," vector-search index using ",(0,t.jsx)(n.code,{children:"openai"})," (although there are many options\nhere: ",(0,t.jsx)(n.code,{children:"torch"}),", ",(0,t.jsx)(n.code,{children:"sentence_transformers"}),", ",(0,t.jsx)(n.code,{children:"transformers"}),", ...)"]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Model"})," is a wrapper around a self-built or ecosystem model, such as ",(0,t.jsx)(n.code,{children:"torch"}),", ",(0,t.jsx)(n.code,{children:"transformers"}),", ",(0,t.jsx)(n.code,{children:"openai"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.openai import OpenAIEmbedding\n\nmodel = OpenAIEmbedding(model='text-embedding-ada-002')\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"model.predict('This is a test', one=True)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Listener"}),' "deploys" a ',(0,t.jsx)(n.code,{children:"Model"}),' to "listen" to incoming data, and compute outputs, which are saved in the database, via ',(0,t.jsx)(n.code,{children:"db"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb import Listener\n\nlistener = Listener(model=model, key='txt', select=collection.find())\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"VectorIndex"})," wraps a ",(0,t.jsx)(n.code,{children:"Listener"}),", making its outputs searchable."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb import VectorIndex\n\ndb.add(\n    VectorIndex(identifier='my-index', indexing_listener=listener)\n)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"db.execute(collection.find_one())\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb.backends.mongodb import Collection\nfrom superduperdb import Document as D\nfrom IPython.display import *\n\nquery = 'Code snippet how to create a `VectorIndex` with a torchvision model'\n\nresult = db.execute(\n    collection\n        .like(D({'txt': query}), vector_index='my-index', n=5)\n        .find()\n)\n\ndisplay(Markdown('---'))\n\nfor r in result:\n    display(Markdown(r['txt']))\n    display(Markdown('---'))\n"})}),"\n",(0,t.jsx)(n.h2,{id:"create-a-chat-completion-component",children:"Create a Chat-Completion Component"}),"\n",(0,t.jsx)(n.p,{children:"In this step, a chat-completion component is created and added to the system. This component is essential for the Q&A functionality:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.openai import OpenAIChatCompletion\n\nchat = OpenAIChatCompletion(\n    model='gpt-3.5-turbo',\n    prompt=(\n        'Use the following description and code-snippets aboout SuperDuperDB to answer this question about SuperDuperDB\\n'\n        'Do not use any other information you might have learned about other python packages\\n'\n        'Only base your answer on the code-snippets retrieved\\n'\n        '{context}\\n\\n'\n        'Here\\'s the question:\\n'\n    ),\n)\n\ndb.add(chat)\n\nprint(db.show('model'))\n"})}),"\n",(0,t.jsx)(n.h2,{id:"ask-questions-to-your-docs",children:"Ask Questions to Your Docs"}),"\n",(0,t.jsx)(n.p,{children:"Finally, you can ask questions about the documents. You can target specific queries and use the power of MongoDB for vector-search and filtering rules. Here's an example of asking a question:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb import Document\nfrom IPython.display import Markdown\n\n# Define the search parameters\nsearch_term = 'Can you give me a code-snippet to set up a `VectorIndex`?'\nnum_results = 5\n\noutput, context = db.predict(\n    model_name='gpt-3.5-turbo',\n    input=search_term,\n    context_select=(\n        collection\n            .like(Document({'txt': search_term}), vector_index='my-index', n=num_results)\n            .find()\n    ),\n    context_key='txt',\n)\n\nMarkdown(output.content)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Reset the demo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"db.remove('vector_index', 'my-index', force=True)\ndb.remove('listener', 'text-embedding-ada-002/txt', force=True)\ndb.remove('model', 'text-embedding-ada-002', force=True)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>a});var t=o(67294);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);