"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[5534],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),s=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(t),m=o,h=c["".concat(i,".").concat(m)]||c[m]||d[m]||a;return t?r.createElement(h,l(l({ref:n},u),{},{components:t})):r.createElement(h,l({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[c]="string"==typeof e?e:o,l[1]=p;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},86817:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={},l="A walkthrough of vector-search on MongoDB Atlas with SuperDuperDB",p={permalink:"/blog/2023/09/31/walkthrough-atlas-vector-search/content",editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/blog/2023-09-31-walkthrough-atlas-vector-search/content.md",source:"@site/blog/2023-09-31-walkthrough-atlas-vector-search/content.md",title:"A walkthrough of vector-search on MongoDB Atlas with SuperDuperDB",description:"*In this tutorial we will show developers how to execute searches leveraging MongoDB Atlas vector-search",date:"2023-10-01T00:00:00.000Z",formattedDate:"October 1, 2023",tags:[],readingTime:2.62,hasTruncateMarker:!1,authors:[],frontMatter:{},nextItem:{title:"Jumpstart AI development on MongoDB with SuperDuperDB",permalink:"/blog/2023/09/30/jump-start-ai-development"}},i={authorsImageUrls:[]},s=[],u={toc:s},c="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"In this tutorial we will show developers how to execute searches leveraging MongoDB Atlas vector-search\nvia SuperDuperDB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Install ",(0,o.kt)("inlineCode",{parentName:"strong"},"superduperdb")," Python package")),(0,o.kt)("p",null,"Using vector-search with SuperDuperDB on MongoDB requires only one simple python package install:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install superduperdb\n")),(0,o.kt)("p",null,"With this install SuperDuperDB includes all the packages needed to define a range of API based and package based\nvector-search models, such as OpenAI and Hugging-Face's ",(0,o.kt)("inlineCode",{parentName:"p"},"transformers"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Connect to your Atlas cluster using SuperDuperDB")),(0,o.kt)("p",null,"SuperDuperDB ships with it's own MongoDB python client, which supports\nall commands supported by ",(0,o.kt)("inlineCode",{parentName:"p"},"pymongo"),". In the example below\nthe key to connecting to your Atlas cluster is the ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," object."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," object contains all functionality needed to read and write to\nthe MongoDB instance and also to define, save and apply a flexible range\nof AI models for vector-search."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from superduperdb.db.base.build import build_datalayer\nfrom superduperdb import CFG\nimport os\n\nATLAS_URI = "mongodb+srv://<user>@<atlas-server>/<database_name>"\nOPENAI_API_KEY = "<your-open-ai-api-key>"\n\nos.environ["OPENAI_API_KEY"] = OPENAI_API_KEY\n\nCFG.data_backend = ATLAS_URI\nCFG.vector_search = ATLAS_URI\n\ndb = build_datalayer()\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Load your data")),(0,o.kt)("p",null,"You can download some data to play with from ",(0,o.kt)("a",{parentName:"p",href:"https://superduperdb-public.s3.eu-west-1.amazonaws.com/pymongo.json"},"this link"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -O https://superduperdb-public.s3.eu-west-1.amazonaws.com/pymongo.json\n")),(0,o.kt)("p",null,"The data contains all inline doc-strings of the ",(0,o.kt)("inlineCode",{parentName:"p"},"pymongo")," Python API (official\nMongoDB driver for Python). The name of the function or class is in ",(0,o.kt)("inlineCode",{parentName:"p"},'"res"')," and\nthe doc-string is contained in ",(0,o.kt)("inlineCode",{parentName:"p"},'"value"'),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import json\n\nwith open('pymongo.json') as f:\n    data = json.load(f)\n")),(0,o.kt)("p",null,"Here's one record to illustrate the data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "pymongo.mongo_client.MongoClient",\n  "parent": null,\n  "value": "\\nClient for a MongoDB instance, a replica set, or a set of mongoses.\\n\\n",\n  "document": "mongo_client.md",\n  "res": "pymongo.mongo_client.MongoClient"\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Insert the data into your Atlas cluster")),(0,o.kt)("p",null,"We can use the SuperDuperDB connection to insert this data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.db.mongodb.query import Collection\n\ncollection = Collection('documents')\n\ndb.execute(\n    collection.insert_many([\n        Document(r) for r in data\n    ])\n)\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Define your vector model and vector-index")),(0,o.kt)("p",null,"Now we have data in our collection we can define the vector-index:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.vector_index import VectorIndex\nfrom superduperdb.container.listener import Listener\nfrom superduperdb.ext.numpy.array import array\nfrom superduperdb.ext.openai.model import OpenAIEmbedding\n\nmodel = OpenAIEmbedding(model='text-embedding-ada-002')\n\ndb.add(\n    VectorIndex(\n        identifier=f'pymongo-docs',\n        indexing_listener=Listener(\n            model=model,\n            key='value',\n            select=Collection('documents').find(),\n            predict_kwargs={'max_chunk_size': 1000},\n        ),\n    )\n)\n")),(0,o.kt)("p",null,"This command tells the system that we want to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"search the ",(0,o.kt)("inlineCode",{parentName:"li"},'"documents"')," collection"),(0,o.kt)("li",{parentName:"ul"},"set-up a vector-index on our Atlas cluster, using the text in the ",(0,o.kt)("inlineCode",{parentName:"li"},'"value"')," field"),(0,o.kt)("li",{parentName:"ul"},"use the OpenAI model ",(0,o.kt)("inlineCode",{parentName:"li"},'"text-embedding-ada-002"')," to create vector-embeddings")),(0,o.kt)("p",null,"After issuing this command, SuperDuperDB does these things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Configures an MongoDB Atlas knn-index in the ",(0,o.kt)("inlineCode",{parentName:"li"},'"documents"')," collection"),(0,o.kt)("li",{parentName:"ul"},"Saves the ",(0,o.kt)("inlineCode",{parentName:"li"},"model")," object in the SuperDuperDB model store hosted on ",(0,o.kt)("inlineCode",{parentName:"li"},"gridfs")),(0,o.kt)("li",{parentName:"ul"},"Applies ",(0,o.kt)("inlineCode",{parentName:"li"},"model")," to all data in the ",(0,o.kt)("inlineCode",{parentName:"li"},'"documents"')," collection, and saves the vectors in the documents"),(0,o.kt)("li",{parentName:"ul"},"Saves the fact that ",(0,o.kt)("inlineCode",{parentName:"li"},"model")," is connected to the ",(0,o.kt)("inlineCode",{parentName:"li"},'"pymongo-docs"')," vector-index")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Use vector-search in a super-duper query")),(0,o.kt)("p",null,"Now we are ready to use the SuperDuperDB query-API for vector-search.\nYou'll see below, that SuperDuperDB handles all logic related to\nconverting queries on the fly to vectors under the hood."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.db.mongodb.query import Collection\nfrom superduperdb.container.document import Document as D\nfrom IPython.display import *\n\nquery = 'Find data'\n\nresult = db.execute(\n    Collection('documents')\n        .like(D({'value': query}), vector_index='pymongo-docs', n=5)\n        .find()\n)\n\nfor r in result:\n    display(Markdown(f'### `{r[\"parent\"] + \".\" if r[\"parent\"] else \"\"}{r[\"res\"]}`'))\n    display(Markdown(r['value']))\n")))}d.isMDXComponent=!0}}]);