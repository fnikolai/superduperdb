"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[2518],{3650:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var a=s(4848),d=s(8453);const t={sidebar_position:2},r="Setting up tables and encodings",o={id:"docs/execute_api/data_encodings_and_schemas",title:"Setting up tables and encodings",description:"Note that for MongoDB this step is only required if",source:"@site/content/docs/execute_api/data_encodings_and_schemas.md",sourceDirName:"docs/execute_api",slug:"/docs/execute_api/data_encodings_and_schemas",permalink:"/docs/docs/execute_api/data_encodings_and_schemas",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/blob/main/docs/hr/content/docs/execute_api/data_encodings_and_schemas.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Data inserts",permalink:"/docs/docs/execute_api/inserting_data"},next:{title:"Basic insertion",permalink:"/docs/docs/execute_api/basic_insertion"}},i={},c=[{value:"<code>DataType</code> abstraction",id:"datatype-abstraction",level:2},{value:"Create a <code>Schema</code>",id:"create-a-schema",level:2},{value:"Table schemas in <code>SQL</code>",id:"table-schemas-in-sql",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"setting-up-tables-and-encodings",children:"Setting up tables and encodings"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Note that for MongoDB this step is only required if\nyou would like to use data-types not supported natively by MongoDB,\nsuch as images. For SQL this is a necessary step."})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"superduperdb"})," has flexible support for data-types. In both MongoDB and SQL databases,\none uses ",(0,a.jsx)(n.code,{children:"superduperdb.DataType"})," to define one's own data-types."]}),"\n",(0,a.jsxs)(n.h2,{id:"datatype-abstraction",children:[(0,a.jsx)(n.code,{children:"DataType"})," abstraction"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"DataType"})," class requires two functions which allow the user to go to-and-from ",(0,a.jsx)(n.code,{children:"bytes"}),".\nHere is an ",(0,a.jsx)(n.code,{children:"DataType"})," which encodes ",(0,a.jsx)(n.code,{children:"numpy.ndarray"})," instances to ",(0,a.jsx)(n.code,{children:"bytes"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import numpy\nfrom superduperdb import DataType\n\nmy_array = DataType(\n    'my-array',\n    encoder=lambda x: memoryview(x).tobytes(),\n    decode=lambda x: numpy.frombuffer(x),\n)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Here's a more interesting ",(0,a.jsx)(n.code,{children:"DataType"})," which encoders audio from ",(0,a.jsx)(n.code,{children:"numpy.array"})," format to ",(0,a.jsx)(n.code,{children:".wav"})," file ",(0,a.jsx)(n.code,{children:"bytes"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import librosa\nimport io\nimport soundfile\n\ndef decoder(x):\n    buffer = io.BytesIO(x)\n    return librosa.load(buffer)\n\ndef encoder(x):\n    buffer = io.BytesIO()\n    soundfile.write(buffer)\n    return buffer.getvalue()\n\naudio = DataType('audio', encoder=encoder, decoder=decoder)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["It's completely open to the user how exactly the ",(0,a.jsx)(n.code,{children:"encoder"})," and ",(0,a.jsx)(n.code,{children:"decoder"})," arguments are set."]}),"\n",(0,a.jsxs)(n.p,{children:["You may include these ",(0,a.jsx)(n.code,{children:"DataType"})," instances in models, data-inserts and more. You can also directly\nregister the ",(0,a.jsx)(n.code,{children:"DataType"})," instances in the system, using:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"db.apply(my_array)\ndb.apply(audio)\n"})}),"\n",(0,a.jsx)(n.p,{children:"To reload (for instance in another session) do:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"my_array_reloaded = db.load('datatype', 'my_array')\naudio_reloaded = db.load('datatype', 'audio')\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsxs)(n.p,{children:["Many of the ",(0,a.jsx)(n.code,{children:"superduperdb"})," extensions come with their own pre-built ",(0,a.jsx)(n.code,{children:"DataType"})," instances.\nFor example:"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"superduperdb.ext.pillow.pil_image"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"superduperdb.ext.numpy.array"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"superduperdb.ext.torch.tensor"})}),"\n"]})]}),"\n",(0,a.jsxs)(n.p,{children:["Read more about ",(0,a.jsx)(n.code,{children:"DataType"})," ",(0,a.jsx)(n.a,{href:"../apply_api/datatype",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.h2,{id:"create-a-schema",children:["Create a ",(0,a.jsx)(n.code,{children:"Schema"})]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Schema"})," component wraps several columns of standard data or ",(0,a.jsx)(n.code,{children:"DataType"})," encoded data; it\nmay be used with MongoDB and SQL databases, but is only necessary for SQL."]}),"\n",(0,a.jsxs)(n.p,{children:["Here is a ",(0,a.jsx)(n.code,{children:"Schema"}),' with three columns, one of the columns is a standard data-type "str".\nThe other 2 are given by the ',(0,a.jsx)(n.code,{children:"DataType"})," instances defined above."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from superduperdb import Schema\nfrom superduperdb.ext.pillow import pil_image\n\nmy_schema = Schema(\n    'my-schema',\n    fields={'txt': 'str', 'audio': audio, 'img': pil_image}\n)\n\n# save this for later use\ndb.apply(my_schema)\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"table-schemas-in-sql",children:["Table schemas in ",(0,a.jsx)(n.code,{children:"SQL"})]}),"\n",(0,a.jsxs)(n.p,{children:["For SQL databases, one needs to have already created a schemas to work with tables in ",(0,a.jsx)(n.code,{children:"superduperdb"}),". To register/ create a ",(0,a.jsx)(n.code,{children:"Table"})," with a ",(0,a.jsx)(n.code,{children:"Schema"})," in ",(0,a.jsx)(n.code,{children:"superduperdb"}),", one uses ",(0,a.jsx)(n.code,{children:"superduperdb.backends.ibis.Table"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from superduperdb.backends.ibis import Table\n\nt = Table('my-table', schema=my_schema)\n\ndb.apply(t)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var a=s(6540);const d={},t=a.createContext(d);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);