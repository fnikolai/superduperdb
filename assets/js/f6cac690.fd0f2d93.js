"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[835],{4613:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=t(4848),s=t(8453);const o={},r="Basic insertion",a={id:"docs/execute_api/basic_insertion",title:"Basic insertion",description:"SuperDuperDB supports inserting data wrapped as dictionaries in Python.",source:"@site/content/docs/execute_api/basic_insertion.md",sourceDirName:"docs/execute_api",slug:"/docs/execute_api/basic_insertion",permalink:"/docs/docs/execute_api/basic_insertion",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/blob/main/docs/hr/content/docs/execute_api/basic_insertion.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Setting up tables and encodings",permalink:"/docs/docs/execute_api/data_encodings_and_schemas"},next:{title:"Inserting difficult datatypes with DataType and/ or Schema",permalink:"/docs/docs/execute_api/encoding_special_data_types"}},c={},d=[{value:"MongoDB",id:"mongodb",level:2},{value:"SQL",id:"sql",level:2},{value:"Monitoring jobs",id:"monitoring-jobs",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"basic-insertion",children:"Basic insertion"}),"\n",(0,i.jsxs)(n.p,{children:["SuperDuperDB supports inserting data wrapped as dictionaries in Python.\nThese dictionaries may contain basic JSON-compatible data, but also\nother data-types to be handled with ",(0,i.jsx)(n.code,{children:"DataType"})," components. All data inserts are wrapped with the ",(0,i.jsx)(n.code,{children:"Document"})," wrapper:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from superduperdb import Document\ndata = ... # an iterable of dictionaries\ndata = [Document(r) for r in data]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"mongodb",children:"MongoDB"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"ids, jobs = db.execute(\n    my_collection.insert_many(data)\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"sql",children:"SQL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"ids, jobs = db.execute(\n    my_table.insert(data)\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring-jobs",children:"Monitoring jobs"}),"\n",(0,i.jsxs)(n.p,{children:["The second output of this command gives a reference to the job computations\nwhich are triggered by the ",(0,i.jsx)(n.code,{children:"Component"})," instances already applied with ",(0,i.jsx)(n.code,{children:"db.apply(...)"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If users have configured a ",(0,i.jsx)(n.code,{children:"ray"})," cluster, the jobs may be monitored at the\nfollowing uri:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from superduperdb import CFG\n\nprint(CFG.cluster.compute.uri)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);